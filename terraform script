# Set the AWS provider
provider "aws" {
  region = "us-east-1"  # Specify the AWS region you want to use
}

# Create a VPC
resource "aws_vpc" "First_vpc" {
  cidr_block = "10.0.0.0/16"
}

# Create a security group in the VPC
resource "aws_security_group" "First_SG" {
  name        = "My_security_group"
  description = "Security Group with ingress and egress rules"
  vpc_id      = aws_vpc.First_vpc.id

  # Ingress (Inbound) rules
  ingress {
    from_port   = 80         # Allow HTTP traffic on port 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow from any IP address
  }

  ingress {
    from_port   = 443        # Allow HTTPS traffic on port 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow from any IP address
  }

  ingress {
    from_port   = 22         # Allow SSH traffic on port 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/8"]  # Allow only internal network to SSH (for security)
  }

  # Egress (Outbound) rules
  egress {
    from_port   = 0          # Allow all outbound traffic
    to_port     = 0
    protocol    = "-1"       # -1 means all protocols
    cidr_blocks = ["0.0.0.0/0"]  # Allow to all IP addresses
  }

  
}

# Create a subnet in the VPC
resource "aws_subnet" "First_subnet" {
  vpc_id                  = aws_vpc.First_vpc.id
  cidr_block              = "10.0.1.0/24"  # Subnet CIDR range
  availability_zone       = "us-east-1a"    # Specify the availability zone
  map_public_ip_on_launch = true             # Assign public IP to instances launched in this subnet

  
}

# Create an Internet Gateway for internet access
resource "aws_internet_gateway" "First_igw" {
  vpc_id = aws_vpc.First_vpc.id

  
}

# Create a route table and associate it with the subnet
resource "aws_route_table" "First_route_table" {
  vpc_id = aws_vpc.First_vpc.id

  route {
    cidr_block = "0.0.0.0/0"  # Default route to allow all outbound traffic
    gateway_id = aws_internet_gateway.First_igw.id
  }

  
}

resource "aws_route_table_association" "First_route_table_assoc" {
  subnet_id      = aws_subnet.First_subnet.id
  route_table_id = aws_route_table.First_route_table.id
}

# Create an EC2 instance
resource "aws_instance" "My_FIrst_ec2" {
  ami           = "ami-04b4f1a9cf54c11d0"  # Replace with the latest Amazon Linux 2 AMI ID for your region
  instance_type = "t2.small"               # Instance type (you can change as per your requirements)
  subnet_id     = aws_subnet.First_subnet.id
  vpc_security_group_ids = [aws_security_group.First_SG.id]    # Attach the security group

  # Set the key pair for SSH access (replace with your existing key pair name)
  key_name = "my-first-key"

  # Configure the instance to start with a public IP
  associate_public_ip_address = true

  # Set a name for the EC2 instance
  

  # User data for the EC2 instance (e.g., to install software on instance startup)
  user_data = <<-EOF
              #!/bin/bash
              yum update -y
              yum install -y httpd
              systemctl start httpd
              systemctl enable httpd
              EOF
}

# Output the public IP address of the EC2 instance
output "ec2_public_ip" {
  value = aws_instance.My_FIrst_ec2.public_ip
}
